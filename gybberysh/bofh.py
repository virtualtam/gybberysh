#!/usr/bin/env python3
"""Bastard D.I.Y. Excuse Board

http://bofh.bjash.com/ExcuseBoard.html

Inspiration:

- https://www.npmjs.com/advisories
- https://www.reddit.com/r/linux/comments/zg7eo/
- http://bbs.idefix.net/textfiles/errors
"""
import random

ADJECTIVE = [
    "aborted",
    "arbitrary",
    "asynchronous",
    "bidirectional",
    "catastrophic",
    "delayed",
    "deprecated",
    "dereferenced",
    "dual-homed",
    "duplicated",
    "dynamic",
    "extraneous",
    "fatal",
    "generic",
    "hardcoded",
    "illegal",
    "immediate",
    "impossible",
    "improper",
    "inherent",
    "insufficient",
    "intermittent",
    "invalid",
    "legacy",
    "local",
    "localised",
    "logic",
    "major",
    "malicious",
    "migrated",
    "minor",
    "momentary",
    "multiple",
    "multiplexed",
    "nonfatal",
    "non-existent",
    "non-replicated",
    "non-serious",
    "non-specific",
    "non-static",
    "non-valid",
    "null",
    "nullified",
    "outdated",
    "outmoded",
    "partial",
    "permanent",
    "recursive",
    "redundant",
    "remote",
    "replicated",
    "resignalled",
    "reverse",
    "sensitive",
    "serial",
    "serious",
    "static",
    "suspended",
    "synchronous",
    "temporary",
    "total",
    "unauthorised",
    "undetermined",
    "unescaped",
    "undiagnosable",
    "unfiltered",
    "unregistered",
    "unreplicatable",
    "unreportable",
    "unsupported",
    "unvalidated",
    "viral",
    "virtual",
    "void",
    "weak",
]

NOUN_1 = [
    "array",
    "assessment",
    "authentication",
    "backplane",
    "bus",
    "checksum",
    "cluster",
    "code",
    "command",
    "comms",
    "compiler",
    "configuration",
    "core",
    "data",
    "decryption",
    "encryption",
    "entropy",
    "environmental",
    "execution",
    "file",
    "firewall",
    "firmware",
    "framing",
    "gateway",
    "handler",
    "hardware",
    "information",
    "initialisation",
    "Initialisation-Vector",
    "installation",
    "integrity",
    "interpretation",
    "key",
    "library",
    "loading",
    "logic-subsystem",
    "Machine-in-the-Middle",
    "Man-in-the-Middle",
    "media",
    "memory",
    "metadata",
    "operation",
    "paging",
    "parameter",
    "parity",
    "path",
    "peripheral",
    "pointer",
    "precondition",
    "privilege",
    "programming",
    "protection",
    "protocol",
    "prototype",
    "proxy",
    "reception",
    "registry",
    "replication",
    "request",
    "resource",
    "retrieval",
    "runtime",
    "sandbox",
    "service",
    "software",
    "SQL",
    "stack",
    "streaming",
    "subsystem",
    "symbol",
    "symbolic",
    "swapfile",
    "synchronisation",
    "syntax",
    "systems",
    "timing",
    "topology",
    "transmission",
]

NOUN_2 = [
    "anomaly",
    "attack",
    "attempt",
    "breakout",
    "bug",
    "bypass",
    "condition",
    "corruption",
    "crash",
    "crashdump",
    "Denial of Service",
    "dereferencing",
    "deprecation",
    "destabilisation",
    "destruction",
    "desynchronisation",
    "dump",
    "escalation",
    "exhaustion",
    "exposure",
    "expiry",
    "failure",
    "fault",
    "halt",
    "incompatibility",
    "infection",
    "injection",
    "interrupt",
    "interruption",
    "invalidation",
    "leakage",
    "lockout",
    "NMI",
    "outage",
    "overflow",
    "override",
    "overwrite",
    "pollution",
    "problem",
    "reclock",
    "rejection",
    "seizure",
    "shortage",
    "stackdump",
    "tabnabbing",
    "termination",
    "timeout",
    "traversal",
    "unavailability",
    "underflow",
]

LEVEL = ["error", "flag", "problem", "signal", "warning"]


def _bofh():
    """Generate a random BOFH excuse"""
    return [
        random.choice(ADJECTIVE),
        random.choice(NOUN_1),
        random.choice(NOUN_2),
        random.choice(LEVEL),
    ]


def bofh():
    """Generate a random BOFH excuse and format it for display"""
    return " ".join([w.capitalize() for w in _bofh()])


def main():
    """BOFH console entrypoint"""
    print(bofh())
